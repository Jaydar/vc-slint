// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.1 OR LicenseRef-Slint-commercial

import {MaterialFontSettings, MaterialPalette,Elevation } from "../theme.slint";

export component Ripple inherits Rectangle {
    in property <length> ripple-x;
    in property <length> ripple-y;
    in property <bool> active;
    in property <bool> has-effect;
    in property <brush> ripple-color <=> i-circle.background;

    states [
        active when root.active && root.has-effect: {
            i-circle.width: root.width * 2 * 1.4142;

            in  {
                animate i-circle.width { duration: 2s; easing: ease-out; }
            }
        }
    ]

    i-circle := Rectangle {
        x: root.ripple-x  - self.width / 2;
        y: root.ripple-y  - self.width / 2;
        height: self.width;
        border-radius: self.width  / 2;
    }
}
export component StateLayer inherits TouchArea {
    in property <bool> focusable;
    in property <brush> checked-background;
    in property <brush> ripple-color;
    in property <bool> has-ripple;
    in property <length> border-radius;
    out property <bool> has-focus <=> i-focus-scope.has-focus;
    in-out property <brush> background;
    in-out property <bool> checked;

    forward-focus: i-focus-scope;

    states [
        pressed when root.pressed: {
            i-ripple.opacity: 0.12;
        }
        checked when root.checked: {
            i-ripple.opacity: 1.0;
            i-ripple.background: root.checked-background;
        }
        hover when root.has-hover: {
            i-ripple.opacity: 0.08;
        }
        focused when root.has-focus: {
            i-ripple.opacity: 0.12;
        }
    ]

    i-ripple := Ripple {
        width: 100%;
        height: 100%;
        opacity: 0;
        active: root.pressed;
        ripple-x: root.pressed-x;
        ripple-y: root.pressed-y;
        clip: true;
        border-radius: root.border-radius;
        background: root.background;
        ripple-color: root.ripple-color;
        has-effect: root.has-ripple;

        animate opacity { duration: 250ms; easing: ease; }
        animate background { duration: 250ms; }
    }

    i-focus-scope := FocusScope {
        x: 0;
        width: 0px; // Do not react on clicks
        enabled: root.enabled && root.focusable;

        key-pressed(event) => {
            if (event.text == " " || event.text == "\n") {
                 root.clicked();
                 return accept;
            }
            return reject;
        }
    }
}




// Default button widget with Material Design Filled Button look and feel.
export component Btn {
    in property <string> text;
    in property <int> name;
    in property <bool> enabled <=> i-state-layer.enabled;
    in property <bool> checkable;
    in property <image> icon;
    in property <bool> primary;
    in property <bool> colorize-icon;
    in property <length> border-radius;
    out property <bool> has-focus: i-state-layer.has-focus;
    out property <bool> pressed: self.enabled &&  i-state-layer.pressed;
    in-out property <bool> checked;

    callback clicked;

    private property <brush> text-color: root.primary ? MaterialPalette.accent-foreground : MaterialPalette.control-foreground;
    private property <float> text-opacity: 1.0;

    min-height: max(40px, i-layout.min-height);
    min-width: max(40px, i-layout.min-width);
    accessible-label: text;
    accessible-role: button;
    forward-focus: i-state-layer;

    states [
        disabled when !root.enabled : {
            i-background.background: MaterialPalette.foreground-alt;
            i-background.opacity: 0.12;
            root.text-opacity: 0.38;
            root.text-color: MaterialPalette.control-foreground;
        }
        checked when root.checked: {
            root.text-color: MaterialPalette.accent-foreground;
        }
    ]

    i-background := Rectangle {
        width: 100%;
        height: 100%;
        border-radius: root.border-radius;
        background: root.primary ? MaterialPalette.accent-background : MaterialPalette.control-background;
        drop-shadow-color: transparent;
        drop-shadow-blur: Elevation.level0;
        drop-shadow-offset-y: 1px;
    }

    i-state-layer := StateLayer {
        has-ripple: true;
        border-radius: i-background.border-radius;
        background: MaterialPalette.foreground-alt;
        ripple-color: MaterialPalette.secondary-ripple;
        checked-background: MaterialPalette.accent-background;
        focusable: true;

        clicked => {
            if (root.checkable) {
                root.checked = !root.checked;
            }
            root.clicked();
        }
    }

    i-layout := Rectangle {
       
        if (root.icon.width > 0 && root.icon.height > 0): Image {
            source <=> root.icon;
            width: 24px;
            height: 24px;
            opacity: root.text-opacity;
            colorize: root.colorize-icon ? root.text-color : transparent;
        }

        if (root.text != "") : Text {
            text: root.text;
            color: root.text-color;
            opacity: root.text-opacity;
            vertical-alignment: center;
            horizontal-alignment: center;
            font-weight: MaterialFontSettings.label-large.font-weight;
            animate color { duration: 250ms; easing: ease; }
        }
    }
}
