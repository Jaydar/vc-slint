// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.1 OR LicenseRef-Slint-commercial

import { FluentFontSettings, FluentPalette, Icons } from "styling.slint";
import { MenuBorder, ListItem, FocusBorder } from "components.slint";
import { ComboBoxBase } from "./common/combobox-color.slint";

export global ColorComboBoxAdapter {
    pure callback color_string(color) -> string;
    pure callback string_color(string) -> color;
}

export component ColorComboBox {
    in property <[color]> model <=> i-base.model;
    in property <bool> enabled <=> i-base.enabled;
    out property <bool> has-focus <=> i-base.has-focus;
    in-out property <int> current-index <=> i-base.current-index;
    in-out property <color> current-value <=> i-base.current-value;

    callback selected <=> i-base.selected;

    min-width: max(160px, i-layout.min-height);
    min-height: max(32px, i-layout.min-height);
    horizontal-stretch: 1;
    vertical-stretch: 0;
    forward-focus: i-base;
    
    

    states [
        disabled when !root.enabled : {
            i-background.background: FluentPalette.control-disabled;
            i-background.border-color: FluentPalette.border;
            i-text.color: FluentPalette.text-disabled;
            // i-icon.colorize: FluentPalette.text-disabled;
        }
        pressed when i-base.pressed : {
            i-background.background: FluentPalette.control-alt-tertiary;
            i-background.border-color: FluentPalette.border;
            i-text.color: FluentPalette.text-secondary;
            // i-icon.colorize: FluentPalette.text-tertiary;
        }
        hover when i-base.has-hover : {
            i-background.background: FluentPalette.control-secondary;
        }
    ]




    i-base := ComboBoxBase {
        width: 100%;
        height: 100%;

        show-popup => {
            i-popup.show();
        }
    }

    i-background := Rectangle {
        border-radius: 3px;
        background: FluentPalette.control-background;
        border-width: 1px;
        border-color: FluentPalette.control-border;

        animate border-color { duration: 200ms; }

        i-layout := HorizontalLayout {
            padding-left: 11px;
            padding-right: 7px;
            spacing: 8px;
            VerticalLayout {

            }

            i-text := TextInput {
                horizontal-alignment: left;
                vertical-alignment: center;
                font-size: FluentFontSettings.body.font-size;
                font-weight: FluentFontSettings.body.font-weight;
                color: FluentPalette.control-foreground;
                text: ColorComboBoxAdapter.color-string(root.current-value);
            }

            VerticalLayout {
                alignment: center;
                i-icon := Rectangle{
                    width: 16px;
                    height: 16px;
                    // y: 2px;
                    background: ColorComboBoxAdapter.string-color(i-text.text);
                }    
            }

            
        }
    }

    // focus border
    if (root.has-focus && root.enabled) : FocusBorder {
        border-radius: i-background.border-radius;
    }

    i-popup := PopupWindow {
        x: 0;
        // Position the popup so that the first element is over the popup.
        // Ideally it should be so that the current element is over the popup.
        y: root.height;
        width: root.width;

        MenuBorder {
            VerticalLayout {
                padding: 4px;

                for value[index] in root.model : Rectangle {
                    height: root.height;
                    width: root.width;
                    background: value;
                  
                    i-touch-area := TouchArea {
                        clicked => {
                            i-base.select(index);
                            i-text.text = ColorComboBoxAdapter.color-string(root.current-value)
                        }
                    }
                }
            }
        }
    }
}
